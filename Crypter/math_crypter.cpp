/**
 * @file math_crypter.cpp
 * @author NEED (need@bugcrowdninja.com)
 * @brief 
 * @version 1.0
 * @date 2022-06-27
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#include<bits/stdc++.h>
using namespace std;
 
string encryptText(string password, string key)
{
    int a = 0, b = 1, c = 0,
        m = 0, k = 0, j = 0;
    string cipher = "", temp = "";
 
    // Declare a password string
    string pw = password;
 
    // Reverse the String
    reverse(pw.begin(), pw.end());
    pw = pw + key;
 
    // For future Purpose
    temp = pw;
    string stringArray = temp;
    string evenString = "", oddString = "";
 
    // Declare EvenArray for storing
    // even index of stringArray
    string evenArray;
 
    // Declare OddArray for storing
    // odd index of stringArray
    string oddArray;
 
    // Storing the positions in their
    // respective arrays
    for(int i = 0;
            i < stringArray.length(); i++)
    {
        if (i % 2 == 0)
        {
            oddString = oddString +
                        stringArray[i];
        }
        else
        {
            evenString = evenString +
                         stringArray[i];
        }
    }
 
    evenArray = new char[evenString.length()];
    oddArray = new char[oddString.length()];

    // Generate a Fibonacci Series
    // Upto the Key Length
    while (m <= key.length())
    {
         
        // As it always starts with 1
        if (m == 0)
            m = 1;
 
        else
        {
             
            // Logic For Fibonacci Series
            a = b;
            b = c;
            c = a + b;
             
            for(int i = 0;
                    i < evenString.length();
                    i++)
            {
                 
                // Caesar Cipher Algorithm Start
                // for even positions
                int p = evenString[i];
                int cip = 0;
                 
                if (p == '0' || p == '1' ||
                    p == '2' || p == '3' ||
                    p == '4' || p == '5' ||
                    p == '6' || p == '7' ||
                    p == '8' || p == '9')
                {
                    cip = p - c;
                     
                    if (cip < '0')
                        cip = cip + 9;
                }
                else
                {
                    cip = p - c;
                    if (cip < 'a')
                    {
                        cip = cip + 26;
                    }
                }
                evenArray[i] = (char)cip;
                 
                // Caesar Cipher Algorithm End
            }
            for(int i = 0;
                    i < oddString.length();
                    i++)
            {
                 
                // Caesar Cipher Algorithm
                // Start for odd positions
                int p = oddString[i];
                int cip = 0;
                 
                if (p == '0' || p == '1' ||
                    p == '2' || p == '3' ||
                    p == '4' || p == '5' ||
                    p == '6' || p == '7' ||
                    p == '8' || p == '9')
                {
                    cip = p + c;
                    if (cip > '9')
                        cip = cip - 9;
                }
                else
                {
                    cip = p + c;
                    if (cip > 'z')
                    {
                        cip = cip - 26;
                    }
                }
                oddArray[i] = (char)cip;
                 
                // Caesar Cipher Algorithm End
            }
            m++;
        }
    }
 
    // Storing content of even and
    // odd array to the string array
    for(int i = 0; i < stringArray.size(); i++)
    {
        if (i % 2 == 0)
        {
            stringArray[i] = oddArray[k];
            k++;
        }
        else
        {
            stringArray[i] = evenArray[j];
            j++;
        }
    }
     
    // Generating a Cipher Text
    // by stringArray (Caesar Cipher)
    for(char d : stringArray)
    {
        cipher = cipher + d;
    }
     
    // Return the Cipher Text
    return cipher;
}

int main ()
{
    string pass = "hello";
    string key = "abcd";

    cout << encryptText(pass, key);

    return 0;
}
