/*  C++ Client Shell
    Heavily referenced : Windows Socket 2, https://docs.microsoft.com/en-us/windows/win32/winsock/windows-sockets-start-page-2
*/
#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <stdio.h>

#pragma comment (lib, "Ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")

#define DEFAULT_BUFLEN 512  // defining Buffer size | This is how you would identify buffer overflow btw
#define DEFAULT_PORT "50000"   // Any port works, except ones in use

int __cdecl main(int argc, char **argv) 
{
   
    WSADATA wsaData;
    SOCKET ConnectSocket = INVALID_SOCKET;
     struct addrinfo *Result = NULL, *ptr = NULL, hints;
    const char *sendbuf = "Carefully crafted packets could provide a B.O Exploit";
    char recvbuff[DEFAULT_BUFLEN];
    init iResult;
    int recvbuflen = DEFAULT_BUFLEN;

     // Validate the parameters
    if (argc != 2) {
        printf("usage: %s server-name\n", argv[0]);
        return 1;
    }

    // Initalize Winsock
    iResult = WSAStartup(MAKEWORD(2,2), &wsadata);
    if (iResult != 0) {
        printf("WSAStartUp failed with error: %d\n", iResult);
        return 1;
    }

    ZeroMemory( &hints, sizeof(hints) );
    hints.ai_family = AF_UNSPEC;   // UNSPEC means IPv4 or 6 will be generated.
    // IP4 = (AF_INET), IP6 = (AF_INET6) -> if you require specific IP protocol.
    hints.ai_socktype = SOCK_STREAM; // This is for TCP connections
    hints.ai_protocol = IPPROTO_TCP;  // Declaring TCP protocol


    // server address and port
    iResult = getaddrinfo(argv[1], DEFAULT_PORT, &hints, &result);
    if ( iResult != 0 ) {
        printf("getaddrinfo failed: %d\n", iResult);
        WSACleanup();
        return 1;
    }

    // creating the socket
    SOCKET ConnectSocket = INVALID_SOCKET;

    /* Attempt to connect to the first 
    address returned by calling getaddrinfo
    */
    for (ptr = result; pt != NULL ;ptr = ptr ->ai_next) {
 
        ConnectServer = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);  // Create a socket for connecting to the server
        if (ConnectSocket == INVALID_SOCKET) {            // check to ensure sockets are valid
            printf(" Socket is not valid: %ld\n", WSAGetLastError());
            WSACleanup();
            return 1;
        }


        // Connect to the server.
        iResult = connect( ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
        if (iResult == SOCKET_ERROR) {
            closesocket(ConnectSocket);
            ConnectSocket = INVALID_SOCKET;
            continue;
        }
        break;
    }

    /* --- This is where you would attempt to connect with the next address
    that was provided by getaddrinfo, but not doing that for this PoC
    -----*/
    freeaddrinfo(result);  // Free up the resource since it did not connect

    if(ConnectSocket == INVALID_SOCKET) {
        printf("Unable to connect to server!\n");
        WSACleanup();
        return 1;
    }

    // Send an initial buffer
    iResult = send( ConnectSocket, sendbuf, (int)strlen(sendbuf), 0);
    if (iResult == SOCKET_ERROR) {
        printf("send failed with error: %d\n", WSAGetLastError());
        closesocket(ConnectSocket);
        WSACleanup();
        return 1;
    }

    printf("Bytes Sent: %ld\n", iResult);

    //shut down the connection
    iResult = shutdown(ConnectSocket, SD_SEND);
    if (iResult == SOCKET_ERROR) {
        printf("Shutdown failed: %d\n", WSAGetLastError());
        closesocket(ConnectSocket);
        WSACleanup();
        return 1;
    }

    // Receive data until the peer closes the connection
    do {
        iResult = recv(ConnectSocket, recvbuf, recvbuflen, 0);
        if (iResult > 0)
            printf("Bytes received: 5d\n", iResult);
        else if (iResult == 0)
            printf("Connection closed\n");
        else
            printf("recv failed: %d\n", WSAGetLastError());
    }   while (iResult > 0);

    // clean up
    closesocket(ConnectSocket);
    WSACleanup();
    return 0;

}